{"ast":null,"code":"import { Auth } from \"./auth\";\nconst API_BASE = process.env.REACT_APP_API_BASE || \"/api\";\n\n// Utility to get the current credentials (from memory or storage)\nfunction getAuthHeader() {\n  const username = localStorage.getItem(\"username\");\n  const password = localStorage.getItem(\"password\");\n  if (!username || !password) return {};\n  return {\n    Authorization: \"Basic \" + btoa(`${username}:${password}`)\n  };\n}\n\n// Register (no auth needed)\nexport async function registerUser(data) {\n  const res = await fetch(`${API_BASE}/users/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return await res.json();\n}\n\n// Login: check credentials by calling /api/users/me\nexport async function loginUser({\n  email,\n  password\n}) {\n  // Store email as \"username\" for compatibility with getAuthHeader()\n  localStorage.setItem(\"username\", email);\n  localStorage.setItem(\"password\", password);\n  const res = await fetch(`${API_BASE}/users/me`, {\n    headers: {\n      Authorization: \"Basic \" + btoa(`${email}:${password}`)\n    }\n  });\n  if (!res.ok) {\n    // Remove invalid credentials\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"password\");\n    throw new Error(\"Login failed\");\n  }\n  return await res.json();\n}\n\n// Get user profile by ID\nexport async function getUserProfile(userId) {\n  const res = await fetch(`${API_BASE}/users/${userId}`, {\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return await res.json();\n}\n\n// Get all users\nexport async function getUserList() {\n  const res = await fetch(`${API_BASE}/users`, {\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return await res.json();\n}\n\n// Update user role\nexport async function updateUserRole(userId, role) {\n  const res = await fetch(`${API_BASE}/users/${userId}/role?role=${role}`, {\n    method: \"PUT\",\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(\"Failed to update user role\");\n  return await res.json();\n}\n\n// Get all suppliers\nexport async function getSuppliers() {\n  const res = await fetch(\"/api/suppliers\", {\n    headers: {\n      ...Auth.getAuthHeader()\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch suppliers\");\n  return res.json();\n}\n\n// Add a supplier\nexport async function addSupplier(data) {\n  const res = await fetch(\"/api/suppliers\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...Auth.getAuthHeader()\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) {\n    const errText = await res.text();\n    throw new Error(`${res.status} ${errText}`);\n  }\n  return res.json();\n}\n\n// Update a supplier\nexport async function updateSupplier(id, data) {\n  const res = await fetch(`/api/suppliers/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...Auth.getAuthHeader()\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error(\"Failed to update supplier\");\n  return res.json();\n}\n\n// Delete a supplier\nexport async function deleteSupplier(id) {\n  const res = await fetch(`/api/suppliers/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      ...Auth.getAuthHeader()\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to delete supplier\");\n  return true;\n}\nexport async function addProduct(product) {\n  const res = await fetch(\"/api/products\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...Auth.getAuthHeader() // <-- This is required!\n    },\n    body: JSON.stringify(product)\n  });\n  if (!res.ok) throw new Error(\"Failed to add product\");\n  return res.json();\n}\nexport async function deleteProduct(id) {\n  const res = await fetch(`/api/products/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      ...Auth.getAuthHeader()\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to delete product\");\n  return true;\n}\nexport async function updateProduct(id, product) {\n  const res = await fetch(`/api/products/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...Auth.getAuthHeader()\n    },\n    body: JSON.stringify(product)\n  });\n  if (!res.ok) {\n    const errText = await res.text();\n    throw new Error(errText || \"Failed to update product\");\n  }\n  return res.json();\n}\nexport async function getProducts() {\n  const res = await fetch(\"/api/products\", {\n    headers: {\n      ...Auth.getAuthHeader()\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch products\");\n  return res.json();\n}\nexport async function getOrders() {\n  const res = await fetch(`${API_BASE}/orders`, {\n    headers: {\n      ...Auth.getAuthHeader()\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch orders\");\n  return res.json();\n}\nexport async function getOrderById(id) {\n  const res = await fetch(`${API_BASE}/orders/${id}`, {\n    headers: {\n      ...Auth.getAuthHeader()\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch order\");\n  return await res.json();\n}\nexport async function placeOrder(data) {\n  const res = await fetch(`${API_BASE}/orders`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...getAuthHeader()\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error(\"Failed to place order\");\n  return await res.json();\n}\nexport async function updateOrderStatus(id, status) {\n  const res = await fetch(`${API_BASE}/orders/${id}/status?status=${encodeURIComponent(status)}`, {\n    method: \"PUT\",\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(\"Failed to update order status\");\n  return await res.json();\n}\nexport async function getPendingUsers(rolesCsv = \"MANAGER,STAFF,SUPPLIER\") {\n  const res = await fetch(`${API_BASE}/users/pending?roles=${encodeURIComponent(rolesCsv)}`, {\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(\"Failed to load pending users\");\n  return res.json();\n}\nexport async function verifyUser(id) {\n  const res = await fetch(`${API_BASE}/users/${id}/verify`, {\n    method: \"PUT\",\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(\"Failed to verify user\");\n  return res.json();\n}\nexport async function deleteUser(id) {\n  const res = await fetch(`${API_BASE}/users/${id}`, {\n    method: \"DELETE\",\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(await res.text());\n}\nexport async function deleteOrder(id) {\n  const res = await fetch(`${API_BASE}/orders/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      ...Auth.getAuthHeader()\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to delete order\");\n  return true;\n}","map":{"version":3,"names":["Auth","API_BASE","process","env","REACT_APP_API_BASE","getAuthHeader","username","localStorage","getItem","password","Authorization","btoa","registerUser","data","res","fetch","method","headers","body","JSON","stringify","ok","Error","text","json","loginUser","email","setItem","removeItem","getUserProfile","userId","getUserList","updateUserRole","role","getSuppliers","addSupplier","errText","status","updateSupplier","id","deleteSupplier","addProduct","product","deleteProduct","updateProduct","getProducts","getOrders","getOrderById","placeOrder","updateOrderStatus","encodeURIComponent","getPendingUsers","rolesCsv","verifyUser","deleteUser","deleteOrder"],"sources":["/workspaces/Smart-Inventory-Order-Management-System/frontend/src/api.js"],"sourcesContent":["import { Auth } from \"./auth\";\n\nconst API_BASE = process.env.REACT_APP_API_BASE || \"/api\";\n\n// Utility to get the current credentials (from memory or storage)\nfunction getAuthHeader() {\n  const username = localStorage.getItem(\"username\");\n  const password = localStorage.getItem(\"password\");\n  if (!username || !password) return {};\n  return {\n    Authorization: \"Basic \" + btoa(`${username}:${password}`)\n  };\n}\n\n// Register (no auth needed)\nexport async function registerUser(data) {\n  const res = await fetch(`${API_BASE}/users/register`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return await res.json();\n}\n\n// Login: check credentials by calling /api/users/me\nexport async function loginUser({ email, password }) {\n  // Store email as \"username\" for compatibility with getAuthHeader()\n  localStorage.setItem(\"username\", email);\n  localStorage.setItem(\"password\", password);\n\n  const res = await fetch(`${API_BASE}/users/me`, {\n    headers: {\n      Authorization: \"Basic \" + btoa(`${email}:${password}`)\n    }\n  });\n\n  if (!res.ok) {\n    // Remove invalid credentials\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"password\");\n    throw new Error(\"Login failed\");\n  }\n  return await res.json();\n}\n\n// Get user profile by ID\nexport async function getUserProfile(userId) {\n  const res = await fetch(`${API_BASE}/users/${userId}`, {\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return await res.json();\n}\n\n// Get all users\nexport async function getUserList() {\n  const res = await fetch(`${API_BASE}/users`, {\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return await res.json();\n}\n\n// Update user role\nexport async function updateUserRole(userId, role) {\n  const res = await fetch(`${API_BASE}/users/${userId}/role?role=${role}`, {\n    method: \"PUT\",\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(\"Failed to update user role\");\n  return await res.json();\n}\n\n// Get all suppliers\nexport async function getSuppliers() {\n  const res = await fetch(\"/api/suppliers\", {\n    headers: { ...Auth.getAuthHeader() }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch suppliers\");\n  return res.json();\n}\n\n// Add a supplier\nexport async function addSupplier(data) {\n  const res = await fetch(\"/api/suppliers\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...Auth.getAuthHeader()\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) {\n    const errText = await res.text();\n    throw new Error(`${res.status} ${errText}`);\n  }\n  return res.json();\n}\n\n// Update a supplier\nexport async function updateSupplier(id, data) {\n  const res = await fetch(`/api/suppliers/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...Auth.getAuthHeader()\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error(\"Failed to update supplier\");\n  return res.json();\n}\n\n// Delete a supplier\nexport async function deleteSupplier(id) {\n  const res = await fetch(`/api/suppliers/${id}`, {\n    method: \"DELETE\",\n    headers: { ...Auth.getAuthHeader() }\n  });\n  if (!res.ok) throw new Error(\"Failed to delete supplier\");\n  return true;\n}\n\nexport async function addProduct(product) {\n  const res = await fetch(\"/api/products\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...Auth.getAuthHeader() // <-- This is required!\n    },\n    body: JSON.stringify(product)\n  });\n  if (!res.ok) throw new Error(\"Failed to add product\");\n  return res.json();\n}\n\nexport async function deleteProduct(id) {\n  const res = await fetch(`/api/products/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      ...Auth.getAuthHeader()\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to delete product\");\n  return true;\n}\n\nexport async function updateProduct(id, product) {\n  const res = await fetch(`/api/products/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...Auth.getAuthHeader()\n    },\n    body: JSON.stringify(product)\n  });\n  if (!res.ok) {\n    const errText = await res.text();\n    throw new Error(errText || \"Failed to update product\");\n  }\n  return res.json();\n}\n\nexport async function getProducts() {\n  const res = await fetch(\"/api/products\", {\n    headers: { ...Auth.getAuthHeader() }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch products\");\n  return res.json();\n}\n\nexport async function getOrders() {\n  const res = await fetch(`${API_BASE}/orders`, {\n    headers: { ...Auth.getAuthHeader() }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch orders\");\n  return res.json();\n}\n\nexport async function getOrderById(id) {\n  const res = await fetch(`${API_BASE}/orders/${id}`, {\n    headers: { ...Auth.getAuthHeader() }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch order\");\n  return await res.json();\n}\n\nexport async function placeOrder(data) {\n  const res = await fetch(`${API_BASE}/orders`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...getAuthHeader()\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error(\"Failed to place order\");\n  return await res.json();\n}\n\nexport async function updateOrderStatus(id, status) {\n  const res = await fetch(`${API_BASE}/orders/${id}/status?status=${encodeURIComponent(status)}`, {\n    method: \"PUT\",\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(\"Failed to update order status\");\n  return await res.json();\n}\n\nexport async function getPendingUsers(rolesCsv = \"MANAGER,STAFF,SUPPLIER\") {\n  const res = await fetch(`${API_BASE}/users/pending?roles=${encodeURIComponent(rolesCsv)}`, {\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(\"Failed to load pending users\");\n  return res.json();\n}\n\nexport async function verifyUser(id) {\n  const res = await fetch(`${API_BASE}/users/${id}/verify`, {\n    method: \"PUT\",\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(\"Failed to verify user\");\n  return res.json();\n}\n\nexport async function deleteUser(id) {\n  const res = await fetch(`${API_BASE}/users/${id}`, {\n    method: \"DELETE\",\n    headers: getAuthHeader()\n  });\n  if (!res.ok) throw new Error(await res.text());\n}\n\nexport async function deleteOrder(id) {\n  const res = await fetch(`${API_BASE}/orders/${id}`, {\n    method: \"DELETE\",\n    headers: { ...Auth.getAuthHeader() }\n  });\n  if (!res.ok) throw new Error(\"Failed to delete order\");\n  return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}